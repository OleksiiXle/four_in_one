<?php

namespace app\modules\post\controllers;

use app\modules\post\grids\PostGrid;
use app\modules\post\models\Post;
use common\models\UserM;
use Yii;
use common\components\AccessControl;
use yii\filters\VerbFilter;
use yii\httpclient\Client;
use yii\helpers\Url;
use yii\web\NotFoundHttpException;
use app\components\AuthHandler;
use yii\web\Response;

class PostController extends MainController
{
    protected $_xapi;

    public function beforeAction($action)
    {
        $apiProvider = \Yii::$app->authClientCollection->getClient('xapi')->fullClientId;

        Yii::$app->configs->apiProvider = $apiProvider;

        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }

    public function behaviors()
    {
        $behaviors = parent::behaviors();
        $behaviors['access'] = [
            'class' => AccessControl::class,
            'rules' => [
                [
                    'allow'      => true,
                    'actions'    => [
                        'index', 'create', 'view', 'delete', 'grid', 'test', 'error', 'rest'
                    ],
                    'roles'      => ['@', '?', ],
                ],
            ],
        ];
        return $behaviors;
    }

    public function actions()
    {
        return [
            'auth' => [
                'class' => 'yii\authclient\AuthAction',
                'successCallback' => [$this, 'onAuthSuccess'],
                'authclient' => 'xapi',
            ],
        ];
    }

    private function checkApiAuthorization($response)
    {
        switch ($response['authError']) {
            case 'Authorization required':
                return $this->redirect($this->xapi->authRedirect);
                break;
            case 'Access denied':
                $session = Yii::$app->session;
                $session->setFlash('error', $response['data']['message']);
                return $this->goBack();
                break;
        }
    }

    public function onAuthSuccess($client)
    {
        (new AuthHandler($client))->handle();
    }

    public function getXapi()
    {
        $tmp = 1;
        if (!($this->_xapi instanceof \app\components\XapiV1Client)) {
            $this->_xapi = clone \Yii::$app->xapi;
        }
        return $this->_xapi;
    }

    protected function checkResponse($response)
    {
        if (!$response->isOk && (!empty($response->data['message']))){
            $session = Yii::$app->session;
            $session->setFlash('danger', $response->data['message']);
        }
    }

    public function actionIndex()
    {
        $t=1;
        $response = $this->getXapi()->callMethod('/post/index', []);
        $this->checkApiAuthorization($response);
        return $this->render('index',[
            //'postsList' => $response['data'],
            'response' => $response,
        ]);

        if ($response['status']){
            return $this->render('index',[
                'postsList' => $response['data'],
                'response' => $response,
            ]);
        } else {
              $session = Yii::$app->session;
              $session->setFlash('error', $response['data']);
            return $this->goBack();

        }
    }

    public function actionGrid()
    {
        $postProvider = new PostGrid();
        if (Yii::$app->request->isPost) {
            Yii::$app->getResponse()->format = Response::FORMAT_HTML;
            return $postProvider->reload(Yii::$app->request->post());
        }
        return $this->render('grid', [
            'postProvider' => $postProvider,
        ]);

    }

    public function actionCreate()
    {
        $post = new Post(\Yii::$app->xapi);
        if (\Yii::$app->request->isPost) {
            $_post = \Yii::$app->request->post();
            if (isset($_post['reset-button'])) {
                return $this->redirect(Url::toRoute('index'));
            }
            $post->setAttributes($_post);

            if ($post->save()) {
                return $this->redirect(Url::toRoute('index'));
            } else {
                $this->checkApiAuthorization($post->response);
            }
        }
        return $this->render('create', [
            'model' => $post,
        ]);
    }

    public function actionUpdate($id)
    {
        if (\Yii::$app->request->isPost) {

        } else {

        }

        return $this->render('create', [
           // 'model' => $post,
        ]);
    }

    /**
     * @return string
     */
    public function actionTest()
    {

        $response = $this->getXapi()->callMethod('/post/index', []);
        return $this->render('test', ['ret' => $response]);

        //    $this->layout = '@app/modules/adminxx/views/layouts/testLayout.php';
        //  $this->layout = false;
        $tmp = 1;
      //  $ret = Post::updateAll(['name' => 'lokoko'], ['id' => 77]);
      //  $ret = Post::findOne(['id' => 1]);
        /*
        $ret = Post::find()
            ->select('post.*, post_media.*')
            ->where(['>', 'post.id' , 1])
            ->leftJoin('post_media', ['post.id' => 'post_media.post_id'])
          //  ->asArray()
            ->orderBy('post.type')
            ->one();
        /*
         * */
        /*
        $tmp = $ret[0];
        $tmp->setAttributes(Yii::$app->request->post());
        $tmp->name = 'lokoko';
        $tmp->save();
        */
        /*
        $r = UserM::find()
            ->where('id > 5')
            ->all();
        foreach ($r as $rr) {
            $ret[] = $rr->toArray(['*'], ['eee']);
        }
        */
        $ret = Post::find()
            ->where(['>', 'id', 1])
            ->requiredFields(['id', 'user_id', 'images', 'mainImage'])
            ->requiredExtraFields(['ownerLastName'])
            ->asArray()
            ->all();

/*
*/
        return $this->render('test', ['ret' => $ret]);
    }

    public function actionRest()
    {
        $xapiRest = \Yii::$app->xapi;
        $response = $xapiRest->callMethod('/post-rest/1', []);
      //  $xapiRest = \Yii::$app->xapiRest;
     //   $response = $xapiRest->callRestMethod('/rest/post/1', []);
        return $this->render('test', ['ret' => $response]);
    }


}
