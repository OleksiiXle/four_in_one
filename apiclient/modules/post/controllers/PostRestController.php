<?php

namespace app\modules\post\controllers;

use app\components\ApiDataProvider;
use app\modules\post\grids\PostGrid;
use app\modules\post\models\Post;
use app\widgets\restGrid\models\AutoFilter;
use common\models\UserM;
use Yii;
use common\components\AccessControl;
use yii\filters\VerbFilter;
use yii\httpclient\Client;
use yii\helpers\Url;
use yii\web\NotFoundHttpException;
use app\components\AuthHandler;
use yii\web\Response;

class PostRestController extends MainController
{
    private $_xapi = null;

    public function beforeAction($action)
    {
        $apiProvider = \Yii::$app->authClientCollection->getClient('xapi')->fullClientId;

        Yii::$app->configs->apiProvider = $apiProvider;

        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }

    public function behaviors()
    {
        $behaviors = parent::behaviors();
        $behaviors['access'] = [
            'class' => AccessControl::class,
            'rules' => [
                [
                    'allow'      => true,
                    'actions'    => [
                        'index', 'create', 'view', 'delete', 'grid', 'test', 'error', 'list'
                    ],
                    'roles'      => ['@', '?', ],
                ],
            ],
        ];
        return $behaviors;
    }

    public function actions()
    {
        return [
            'auth' => [
                'class' => 'yii\authclient\AuthAction',
                'successCallback' => [$this, 'onAuthSuccess'],
                'authclient' => 'xapi',
            ],
        ];
    }

    private function checkApiAuthorization($response)
    {
        switch ($response['authError']) {
            case 'Authorization required':
                return $this->redirect($this->xapi->authRedirect);
                break;
            case 'Access denied':
                $session = Yii::$app->session;
                $session->setFlash('error', $response['data']['message']);
                return $this->goBack();
                break;
        }
    }

    public function onAuthSuccess($client)
    {
        (new AuthHandler($client))->handle();
    }

    public function getXapi()
    {
        if ($this->_xapi === null) {
            $this->_xapi = clone \Yii::$app->xapi;
        }
        return $this->_xapi;
    }

    protected function checkResponse($response)
    {
        if (!$response->isOk && (!empty($response->data['message']))){
            $session = Yii::$app->session;
            $session->setFlash('danger', $response->data['message']);
        }
    }

    public function actionIndex()
    {
        $tmp = 1;
        $dataProvider = new ApiDataProvider([
            'pagination' => [
                'pageSize' => 2,
            ],
            'link'          => '/post-rest',
            'apiLinkParams' => [
                'user_id' => 0,
            ],
          //  'modelClass'    => Post::class,
            'sort' => [
                'attributes' => [
                    'name' => [
                        'asc' => [
                            'name' => SORT_ASC,
                        ],
                        'desc' => [
                            'name' => SORT_DESC,
                        ],
                    ],
                    'id' => [
                        'asc' => [
                            'id' => SORT_ASC,
                        ],
                        'desc' => [
                            'id' => SORT_DESC,
                        ],
                    ],

                ],
                'enableMultiSort' => true,
            ],
            'autoFilter' => [
                'attributes' => [
                    'name' => [
                        'col' => 1,
                        'label' => 'Название',
                        'condition' => 'LIKE',
                        'renderType' => 'input',
                    ],
                    'id' => [
                        'col' => 2,
                        'condition' => '=',
                        'renderType' => 'input',
                    ],
                    'type' => [
                        'col' => 2,
                        'condition' => '=',
                        'renderType' => 'dropdownList',
                        'list' => [
                            0 => 'Все',
                            1 => 'Главная страница',
                            2 => 'Привязка к цели',
                        ],
                    ],
                ],
                'rules' => [
                    [['id', 'type'], 'integer'],
                    [['name'], 'string', 'min' => 3, 'max' =>20],
                    [['name'], 'match', 'pattern' => AutoFilter::PATTERN_TEXT, 'message' => AutoFilter::PATTERN_TEXT_ERROR_MESSAGE,],
                ],
            ],

            //  'conserveName'  => 'restPostGrid',
        ]);
        return $this->render('index',
            [
                'dataProvider' => $dataProvider,
            ]);

        $response = $this->xapi->callMethod('/post-rest', ['pageSize' => 2], 'GET', []);
        //  $xapiRest = \Yii::$app->xapiRest;
        //   $response = $xapiRest->callRestMethod('/rest/post/1', []);
        return $this->render('index', ['ret' => $response]);
    }

    public function actionList()
    {
        $xapiRest = \Yii::$app->xapi;
        $response = $xapiRest->callMethod('/post-rest/1', []);
        //  $xapiRest = \Yii::$app->xapiRest;
        //   $response = $xapiRest->callRestMethod('/rest/post/1', []);
        return $this->render('test', ['ret' => $response]);
    }

    /**
     * @return string
     */
    public function actionTest()
    {

        $response = $this->getXapi()->callMethod('/post/index', []);
        return $this->render('test', ['ret' => $response]);

        //    $this->layout = '@app/modules/adminxx/views/layouts/testLayout.php';
        //  $this->layout = false;
        $tmp = 1;
      //  $ret = Post::updateAll(['name' => 'lokoko'], ['id' => 77]);
      //  $ret = Post::findOne(['id' => 1]);
        /*
        $ret = Post::find()
            ->select('post.*, post_media.*')
            ->where(['>', 'post.id' , 1])
            ->leftJoin('post_media', ['post.id' => 'post_media.post_id'])
          //  ->asArray()
            ->orderBy('post.type')
            ->one();
        /*
         * */
        /*
        $tmp = $ret[0];
        $tmp->setAttributes(Yii::$app->request->post());
        $tmp->name = 'lokoko';
        $tmp->save();
        */
        /*
        $r = UserM::find()
            ->where('id > 5')
            ->all();
        foreach ($r as $rr) {
            $ret[] = $rr->toArray(['*'], ['eee']);
        }
        */
        $ret = Post::find()
            ->where(['>', 'id', 1])
            ->requiredFields(['id', 'user_id', 'images', 'mainImage'])
            ->requiredExtraFields(['ownerLastName'])
            ->asArray()
            ->all();

/*
*/
        return $this->render('test', ['ret' => $ret]);
    }

    public function actionRest()
    {
        $xapiRest = \Yii::$app->xapi;
        $response = $xapiRest->callMethod('/post-rest/1', []);
      //  $xapiRest = \Yii::$app->xapiRest;
     //   $response = $xapiRest->callRestMethod('/rest/post/1', []);
        return $this->render('test', ['ret' => $response]);
    }


}
